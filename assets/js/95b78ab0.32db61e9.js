"use strict";(self.webpackChunkzustand_zh=self.webpackChunkzustand_zh||[]).push([[711],{2599:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var s=n(4848),a=n(8453);const o={title:"Map and Set Usage",nav:11},r=void 0,d={id:"guides/maps-and-sets-usage",title:"Map and Set Usage",description:"You need to wrap Maps and Sets inside an object. When you want its update to be reflected (e.g. in React),",source:"@site/docs/guides/maps-and-sets-usage.md",sourceDirName:"guides",slug:"/guides/maps-and-sets-usage",permalink:"/zustand-zh/docs/guides/maps-and-sets-usage",draft:!1,unlisted:!1,editUrl:"https://github.com/ouweiya/zustand-zh/docs/guides/maps-and-sets-usage.md",tags:[],version:"current",frontMatter:{title:"Map and Set Usage",nav:11},sidebar:"tutorialSidebar",previous:{title:"Initialize state with props",permalink:"/zustand-zh/docs/guides/initialize-state-with-props"},next:{title:"Setup with Next.js",permalink:"/zustand-zh/docs/guides/nextjs"}},i={},c=[];function u(e){const t={a:"a",code:"code",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["You need to wrap Maps and Sets inside an object. When you want its update to be reflected (e.g. in React),\r\nyou do it by calling ",(0,s.jsx)(t.code,{children:"setState"})," on it:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.strong,{children:["You can view a codesandbox here: ",(0,s.jsx)(t.a,{href:"https://codesandbox.io/s/late-https-bxz9qy",children:"https://codesandbox.io/s/late-https-bxz9qy"})]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"import { create } from 'zustand'\r\n\r\nconst useFooBar = create(() => ({ foo: new Map(), bar: new Set() }))\r\n\r\nfunction doSomething() {\r\n  // doing something...\r\n\r\n  // If you want to update some React component that uses `useFooBar`, you have to call setState\r\n  // to let React know that an update happened.\r\n  // Following React's best practices, you should create a new Map/Set when updating them:\r\n  useFooBar.setState((prev) => ({\r\n    foo: new Map(prev.foo).set('newKey', 'newValue'),\r\n    bar: new Set(prev.bar).add('newKey'),\r\n  }))\r\n}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>d});var s=n(6540);const a={},o=s.createContext(a);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);