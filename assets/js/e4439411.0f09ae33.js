"use strict";(self.webpackChunkzustand_zh=self.webpackChunkzustand_zh||[]).push([[118],{646:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var r=n(4848),s=n(8453);const o={title:"Testing",description:"Writing Tests",nav:9},i=void 0,c={id:"guides/testing",title:"Testing",description:"Writing Tests",source:"@site/docs/guides/testing.md",sourceDirName:"guides",slug:"/guides/testing",permalink:"/zustand-zh/docs/guides/testing",draft:!1,unlisted:!1,editUrl:"https://github.com/ouweiya/zustand-zh/blob/master/docs/guides/testing.md",tags:[],version:"current",frontMatter:{title:"Testing",description:"Writing Tests",nav:9},sidebar:"tutorialSidebar",previous:{title:"TypeScript Guide",permalink:"/zustand-zh/docs/guides/typescript"},next:{title:"Calling actions outside a React event handler in pre React 18",permalink:"/zustand-zh/docs/guides/event-handler-in-pre-react-18"}},a={},d=[{value:"Setting Up a Test Environment",id:"setting-up-a-test-environment",level:2},{value:"Test Runners",id:"test-runners",level:3},{value:"UI and Network Testing Tools",id:"ui-and-network-testing-tools",level:3},{value:"Setting Up Zustand for testing",id:"setting-up-zustand-for-testing",level:2},{value:"Shared code just for testing purposes",id:"shared-code-just-for-testing-purposes",level:3},{value:"Jest",id:"jest",level:3},{value:"Vitest",id:"vitest",level:3},{value:"Testing components",id:"testing-components",level:3},{value:"References",id:"references",level:2}];function l(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"setting-up-a-test-environment",children:"Setting Up a Test Environment"}),"\n",(0,r.jsx)(t.h3,{id:"test-runners",children:"Test Runners"}),"\n",(0,r.jsx)(t.p,{children:"Usually, your test runner needs to be configured to run JavaScript/TypeScript syntax. If you're\r\ngoing to be testing UI components, you will likely need to configure the test runner to use JSDOM\r\nto provide a mock DOM environment."}),"\n",(0,r.jsx)(t.p,{children:"See these resources for test runner configuration instructions:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Jest"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://jestjs.io/docs/getting-started",children:"Jest: Getting Started"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://jestjs.io/docs/configuration#testenvironment-string",children:"Jest: Configuration - Test Environment"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Vitest"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://vitest.dev/guide",children:"Vitest: Getting Started"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://vitest.dev/config/#environment",children:"Vitest: Configuration - Test Environment"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"ui-and-network-testing-tools",children:"UI and Network Testing Tools"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsxs)(t.strong,{children:["We recommend using ",(0,r.jsx)(t.a,{href:"https://testing-library.com/docs/react-testing-library/intro",children:"React Testing Library (RTL)"}),"\r\nto test out React components that connect to Zustand"]}),". RTL is a simple and complete React DOM\r\ntesting utility that encourages good testing practices. It uses ReactDOM's ",(0,r.jsx)(t.code,{children:"render"})," function and\r\n",(0,r.jsx)(t.code,{children:"act"})," from ",(0,r.jsx)(t.code,{children:"react-dom/tests-utils"}),". Futhermore, ",(0,r.jsx)(t.a,{href:"https://testing-library.com/docs/react-native-testing-library/intro",children:"Native Testing Library (RNTL)"}),"\r\nis the alternative to RTL to test out React Native components. The ",(0,r.jsx)(t.a,{href:"https://testing-library.com/",children:"Testing Library"}),"\r\nfamily of tools also includes adapters for many other popular frameworks."]}),"\n",(0,r.jsxs)(t.p,{children:["We also recommend using ",(0,r.jsx)(t.a,{href:"https://mswjs.io/",children:"Mock Service Worker (MSW)"})," to mock network requests, as\r\nthis means your application logic does not need to be changed or mocked when writing tests."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"React Testing Library (DOM)"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://testing-library.com/docs/dom-testing-library/setup",children:"DOM Testing Library: Setup"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://testing-library.com/docs/react-testing-library/setup",children:"React Testing Library: Setup"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://testing-library.com/docs/ecosystem-jest-dom",children:"Testing Library Jest-DOM Matchers"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Native Testing Library (React Native)"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://testing-library.com/docs/react-native-testing-library/setup",children:"Native Testing Library: Setup"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"User Event Testing Library (DOM)"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://testing-library.com/docs/user-event/setup",children:"User Event Testing Library: Setup"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"TypeScript for Jest"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://kulshekhar.github.io/ts-jest/docs/getting-started/installation",children:"TypeScript for Jest: Setup"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"TypeScript for Node"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://typestrong.org/ts-node/docs/installation",children:"TypeScript for Node: Setup"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Mock Service Worker"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://mswjs.io/docs/getting-started/install",children:"MSW: Installation"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://mswjs.io/docs/getting-started/mocks/rest-api",children:"MSW: Setting up mock requests"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://mswjs.io/docs/getting-started/integrate/node",children:"MSW: Mock server configuration for Node"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"setting-up-zustand-for-testing",children:"Setting Up Zustand for testing"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Note"}),": Since Jest and Vitest have slight differences, like Vitest using ",(0,r.jsx)(t.strong,{children:"ES modules"})," and Jest using\r\n",(0,r.jsx)(t.strong,{children:"CommonJS modules"}),", you need to keep that in mind if you are using Vitest instead of Jest."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"The mock provided below will enable the relevant test runner to reset the zustand stores after each test."}),"\n",(0,r.jsx)(t.h3,{id:"shared-code-just-for-testing-purposes",children:"Shared code just for testing purposes"}),"\n",(0,r.jsxs)(t.p,{children:["This shared code was added to avoid code duplication in our demo since we use the same counter store\r\ncreator for both implementations, with and without ",(0,r.jsx)(t.code,{children:"Context"})," API \u2014 ",(0,r.jsx)(t.code,{children:"createStore"})," and ",(0,r.jsx)(t.code,{children:"create"}),", respectively."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// shared/counter-store-creator.ts\r\nimport { type StateCreator } from 'zustand'\r\n\r\nexport type CounterStore = {\r\n  count: number\r\n  inc: () => void\r\n}\r\n\r\nexport const counterStoreCreator: StateCreator<CounterStore> = (set) => ({\r\n  count: 1,\r\n  inc: () => set((state) => ({ count: state.count + 1 })),\r\n})\n"})}),"\n",(0,r.jsx)(t.h3,{id:"jest",children:"Jest"}),"\n",(0,r.jsx)(t.p,{children:"In the next steps we are going to setup our Jest environment in order to mock Zustand."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// __mocks__/zustand.ts\r\nimport * as zustand from 'zustand'\r\nimport { act } from '@testing-library/react'\r\n\r\nconst { create: actualCreate, createStore: actualCreateStore } =\r\n  jest.requireActual<typeof zustand>('zustand')\r\n\r\n// a variable to hold reset functions for all stores declared in the app\r\nexport const storeResetFns = new Set<() => void>()\r\n\r\nconst createUncurried = <T>(stateCreator: zustand.StateCreator<T>) => {\r\n  const store = actualCreate(stateCreator)\r\n  const initialState = store.getInitialState()\r\n  storeResetFns.add(() => {\r\n    store.setState(initialState, true)\r\n  })\r\n  return store\r\n}\r\n\r\n// when creating a store, we get its initial state, create a reset function and add it in the set\r\nexport const create = (<T>(stateCreator: zustand.StateCreator<T>) => {\r\n  console.log('zustand create mock')\r\n\r\n  // to support curried version of create\r\n  return typeof stateCreator === 'function'\r\n    ? createUncurried(stateCreator)\r\n    : createUncurried\r\n}) as typeof zustand.create\r\n\r\nconst createStoreUncurried = <T>(stateCreator: zustand.StateCreator<T>) => {\r\n  const store = actualCreateStore(stateCreator)\r\n  const initialState = store.getInitialState()\r\n  storeResetFns.add(() => {\r\n    store.setState(initialState, true)\r\n  })\r\n  return store\r\n}\r\n\r\n// when creating a store, we get its initial state, create a reset function and add it in the set\r\nexport const createStore = (<T>(stateCreator: zustand.StateCreator<T>) => {\r\n  console.log('zustand createStore mock')\r\n\r\n  // to support curried version of createStore\r\n  return typeof stateCreator === 'function'\r\n    ? createStoreUncurried(stateCreator)\r\n    : createStoreUncurried\r\n}) as typeof zustand.createStore\r\n\r\n// reset all stores after each test run\r\nafterEach(() => {\r\n  act(() => {\r\n    storeResetFns.forEach((resetFn) => {\r\n      resetFn()\r\n    })\r\n  })\r\n})\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// setup-jest.ts\r\nimport '@testing-library/jest-dom'\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// jest.config.ts\r\nimport type { JestConfigWithTsJest } from 'ts-jest'\r\n\r\nconst config: JestConfigWithTsJest = {\r\n  preset: 'ts-jest',\r\n  testEnvironment: 'jsdom',\r\n  setupFilesAfterEnv: ['./setup-jest.ts'],\r\n}\r\n\r\nexport default config\n"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Note"}),": to use TypeScript we need to install two packages ",(0,r.jsx)(t.code,{children:"ts-jest"})," and ",(0,r.jsx)(t.code,{children:"ts-node"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"vitest",children:"Vitest"}),"\n",(0,r.jsx)(t.p,{children:"In the next steps we are going to setup our Vitest environment in order to mock Zustand."}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Warning:"})," In Vitest you can change the ",(0,r.jsx)(t.a,{href:"https://vitest.dev/config/#root",children:"root"}),".\r\nDue to that, you need make sure that you are creating your ",(0,r.jsx)(t.code,{children:"__mocks__"})," directory in the right place.\r\nLet's say that you change the ",(0,r.jsx)(t.strong,{children:"root"})," to ",(0,r.jsx)(t.code,{children:"./src"}),", that means you need to create a ",(0,r.jsx)(t.code,{children:"__mocks__"}),"\r\ndirectory under ",(0,r.jsx)(t.code,{children:"./src"}),". The end result would be ",(0,r.jsx)(t.code,{children:"./src/__mocks__"}),", rather than ",(0,r.jsx)(t.code,{children:"./__mocks__"}),".\r\nCreating ",(0,r.jsx)(t.code,{children:"__mocks__"})," directory in the wrong place can lead to issues when using Vitest."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// __mocks__/zustand.ts\r\nimport * as zustand from 'zustand'\r\nimport { act } from '@testing-library/react'\r\n\r\nconst { create: actualCreate, createStore: actualCreateStore } =\r\n  await vi.importActual<typeof zustand>('zustand')\r\n\r\n// a variable to hold reset functions for all stores declared in the app\r\nexport const storeResetFns = new Set<() => void>()\r\n\r\nconst createUncurried = <T>(stateCreator: zustand.StateCreator<T>) => {\r\n  const store = actualCreate(stateCreator)\r\n  const initialState = store.getInitialState()\r\n  storeResetFns.add(() => {\r\n    store.setState(initialState, true)\r\n  })\r\n  return store\r\n}\r\n\r\n// when creating a store, we get its initial state, create a reset function and add it in the set\r\nexport const create = (<T>(stateCreator: zustand.StateCreator<T>) => {\r\n  console.log('zustand create mock')\r\n\r\n  // to support curried version of create\r\n  return typeof stateCreator === 'function'\r\n    ? createUncurried(stateCreator)\r\n    : createUncurried\r\n}) as typeof zustand.create\r\n\r\nconst createStoreUncurried = <T>(stateCreator: zustand.StateCreator<T>) => {\r\n  const store = actualCreateStore(stateCreator)\r\n  const initialState = store.getInitialState()\r\n  storeResetFns.add(() => {\r\n    store.setState(initialState, true)\r\n  })\r\n  return store\r\n}\r\n\r\n// when creating a store, we get its initial state, create a reset function and add it in the set\r\nexport const createStore = (<T>(stateCreator: zustand.StateCreator<T>) => {\r\n  console.log('zustand createStore mock')\r\n\r\n  // to support curried version of createStore\r\n  return typeof stateCreator === 'function'\r\n    ? createStoreUncurried(stateCreator)\r\n    : createStoreUncurried\r\n}) as typeof zustand.createStore\r\n\r\n// reset all stores after each test run\r\nafterEach(() => {\r\n  act(() => {\r\n    storeResetFns.forEach((resetFn) => {\r\n      resetFn()\r\n    })\r\n  })\r\n})\n"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Note"}),": without ",(0,r.jsx)(t.a,{href:"https://vitest.dev/config/#globals",children:"globals configuration"})," enabled, we need\r\nto add ",(0,r.jsx)(t.code,{children:"import { afterEach, vi } from 'vitest'"})," at the top."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'// global.d.ts\r\n/// <reference types="vite/client" />\r\n/// <reference types="vitest/globals" />\n'})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Note"}),": without ",(0,r.jsx)(t.a,{href:"https://vitest.dev/config/#globals",children:"globals configuration"})," enabled, we do\r\nneed to remove ",(0,r.jsx)(t.code,{children:'/// <reference types="vitest/globals" />'}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// setup-vitest.ts\r\nimport '@testing-library/jest-dom'\r\n\r\nvi.mock('zustand') // to make it work like Jest (auto-mocking)\n"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Note"}),": without ",(0,r.jsx)(t.a,{href:"https://vitest.dev/config/#globals",children:"globals configuration"})," enabled, we need\r\nto add ",(0,r.jsx)(t.code,{children:"import { vi } from 'vitest'"})," at the top."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// vitest.config.ts\r\nimport { defineConfig, mergeConfig } from 'vitest/config'\r\nimport viteConfig from './vite.config'\r\n\r\nexport default mergeConfig(\r\n  viteConfig,\r\n  defineConfig({\r\n    test: {\r\n      globals: true,\r\n      environment: 'jsdom',\r\n      setupFiles: ['./setup-vitest.ts'],\r\n    },\r\n  }),\r\n)\n"})}),"\n",(0,r.jsx)(t.h3,{id:"testing-components",children:"Testing components"}),"\n",(0,r.jsxs)(t.p,{children:["In the next examples we are going to use ",(0,r.jsx)(t.code,{children:"useCounterStore"})]}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Note"}),": all of these examples are written using TypeScript."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// stores/counter-store-creator.ts\r\nimport { type StateCreator } from 'zustand'\r\n\r\nexport type CounterStore = {\r\n  count: number\r\n  inc: () => void\r\n}\r\n\r\nexport const counterStoreCreator: StateCreator<CounterStore> = (set) => ({\r\n  count: 1,\r\n  inc: () => set((state) => ({ count: state.count + 1 })),\r\n})\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// stores/user-counter-store.ts\r\nimport { create } from 'zustand'\r\n\r\nimport {\r\n  type CounterStore,\r\n  counterStoreCreator,\r\n} from '../shared/counter-store-creator'\r\n\r\nexport const useCounterStore = create<CounterStore>()(counterStoreCreator)\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"// contexts/use-counter-store-context.tsx\r\nimport { type ReactNode, createContext, useContext, useRef } from 'react'\r\nimport { createStore } from 'zustand'\r\nimport { useStoreWithEqualityFn } from 'zustand/traditional'\r\nimport { shallow } from 'zustand/shallow'\r\n\r\nimport {\r\n  type CounterStore,\r\n  counterStoreCreator,\r\n} from '../shared/counter-store-creator'\r\n\r\nexport const createCounterStore = () => {\r\n  return createStore<CounterStore>(counterStoreCreator)\r\n}\r\n\r\nexport type CounterStoreApi = ReturnType<typeof createCounterStore>\r\n\r\nexport const CounterStoreContext = createContext<CounterStoreApi | undefined>(\r\n  undefined,\r\n)\r\n\r\nexport interface CounterStoreProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\nexport const CounterStoreProvider = ({\r\n  children,\r\n}: CounterStoreProviderProps) => {\r\n  const counterStoreRef = useRef<CounterStoreApi>()\r\n  if (!counterStoreRef.current) {\r\n    counterStoreRef.current = createCounterStore()\r\n  }\r\n\r\n  return (\r\n    <CounterStoreContext.Provider value={counterStoreRef.current}>\r\n      {children}\r\n    </CounterStoreContext.Provider>\r\n  )\r\n}\r\n\r\nexport type UseCounterStoreContextSelector<T> = (store: CounterStore) => T\r\n\r\nexport const useCounterStoreContext = <T,>(\r\n  selector: UseCounterStoreContextSelector<T>,\r\n): T => {\r\n  const counterStoreContext = useContext(CounterStoreContext)\r\n\r\n  if (counterStoreContext === undefined) {\r\n    throw new Error(\r\n      'useCounterStoreContext must be used within CounterStoreProvider',\r\n    )\r\n  }\r\n\r\n  return useStoreWithEqualityFn(counterStoreContext, selector, shallow)\r\n}\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"// components/counter/counter.tsx\r\nimport { useCounterStore } from '../../stores/use-counter-store'\r\n\r\nexport function Counter() {\r\n  const { count, inc } = useCounterStore()\r\n\r\n  return (\r\n    <div>\r\n      <h2>Counter Store</h2>\r\n      <h4>{count}</h4>\r\n      <button onClick={inc}>One Up</button>\r\n    </div>\r\n  )\r\n}\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// components/counter/index.ts\r\nexport * from './counter'\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"// components/counter/counter.test.tsx\r\nimport { act, render, screen } from '@testing-library/react'\r\nimport userEvent from '@testing-library/user-event'\r\n\r\nimport { Counter } from './counter'\r\n\r\ndescribe('Counter', () => {\r\n  test('should render with initial state of 1', async () => {\r\n    renderCounter()\r\n\r\n    expect(await screen.findByText(/^1$/)).toBeInTheDocument()\r\n    expect(\r\n      await screen.findByRole('button', { name: /one up/i }),\r\n    ).toBeInTheDocument()\r\n  })\r\n\r\n  test('should increase count by clicking a button', async () => {\r\n    const user = userEvent.setup()\r\n\r\n    renderCounter()\r\n\r\n    expect(await screen.findByText(/^1$/)).toBeInTheDocument()\r\n\r\n    await act(async () => {\r\n      await user.click(await screen.findByRole('button', { name: /one up/i }))\r\n    })\r\n\r\n    expect(await screen.findByText(/^2$/)).toBeInTheDocument()\r\n  })\r\n})\r\n\r\nconst renderCounter = () => {\r\n  return render(<Counter />)\r\n}\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"// components/counter-with-context/counter-with-context.tsx\r\nimport {\r\n  CounterStoreProvider,\r\n  useCounterStoreContext,\r\n} from '../../contexts/use-counter-store-context'\r\n\r\nconst Counter = () => {\r\n  const { count, inc } = useCounterStoreContext((state) => state)\r\n\r\n  return (\r\n    <div>\r\n      <h2>Counter Store Context</h2>\r\n      <h4>{count}</h4>\r\n      <button onClick={inc}>One Up</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const CounterWithContext = () => {\r\n  return (\r\n    <CounterStoreProvider>\r\n      <Counter />\r\n    </CounterStoreProvider>\r\n  )\r\n}\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"// components/counter-with-context/index.ts\r\nexport * from './counter-with-context'\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"// components/counter-with-context/counter-with-context.test.tsx\r\nimport { act, render, screen } from '@testing-library/react'\r\nimport userEvent from '@testing-library/user-event'\r\n\r\nimport { CounterWithContext } from './counter-with-context'\r\n\r\ndescribe('CounterWithContext', () => {\r\n  test('should render with initial state of 1', async () => {\r\n    renderCounterWithContext()\r\n\r\n    expect(await screen.findByText(/^1$/)).toBeInTheDocument()\r\n    expect(\r\n      await screen.findByRole('button', { name: /one up/i }),\r\n    ).toBeInTheDocument()\r\n  })\r\n\r\n  test('should increase count by clicking a button', async () => {\r\n    const user = userEvent.setup()\r\n\r\n    renderCounterWithContext()\r\n\r\n    expect(await screen.findByText(/^1$/)).toBeInTheDocument()\r\n\r\n    await act(async () => {\r\n      await user.click(await screen.findByRole('button', { name: /one up/i }))\r\n    })\r\n\r\n    expect(await screen.findByText(/^2$/)).toBeInTheDocument()\r\n  })\r\n})\r\n\r\nconst renderCounterWithContext = () => {\r\n  return render(<CounterWithContext />)\r\n}\n"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Note"}),": without ",(0,r.jsx)(t.a,{href:"https://vitest.dev/config/#globals",children:"globals configuration"})," enabled, we need\r\nto add ",(0,r.jsx)(t.code,{children:"import { describe, test, expect } from 'vitest'"})," at the top of each test file."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"CodeSandbox Demos"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Jest Demo: ",(0,r.jsx)(t.a,{href:"https://stackblitz.com/edit/jest-zustand",children:"https://stackblitz.com/edit/jest-zustand"})]}),"\n",(0,r.jsxs)(t.li,{children:["Vitest Demo: ",(0,r.jsx)(t.a,{href:"https://stackblitz.com/edit/vitest-zustand",children:"https://stackblitz.com/edit/vitest-zustand"})]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"React Testing Library"}),": ",(0,r.jsx)(t.a,{href:"https://testing-library.com/docs/react-testing-library/intro",children:"React Testing Library (RTL)"}),"\r\nis a very lightweight solution for testing React components. It provides utility functions on top\r\nof ",(0,r.jsx)(t.code,{children:"react-dom"})," and ",(0,r.jsx)(t.code,{children:"react-dom/test-utils"}),', in a way that encourages better testing practices. Its\r\nprimary guiding principle is: "The more your tests resemble the way your software is used, the\r\nmore confidence they can give you."']}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Native Testing Library"}),": ",(0,r.jsx)(t.a,{href:"https://testing-library.com/docs/react-native-testing-library/intro",children:"Native Testing Library (RNTL)"}),"\r\nis a very lightweight solution for testing React Native components, similarly to RTL, but its\r\nfunctions are built on top of ",(0,r.jsx)(t.code,{children:"react-test-renderer"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Testing Implementation Details"}),": Blog post by Kent C. Dodds on why he recommends to avoid\r\n",(0,r.jsx)(t.a,{href:"https://kentcdodds.com/blog/testing-implementation-details",children:"testing implementation details"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var r=n(6540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);