"use strict";(self.webpackChunkzustand_zh=self.webpackChunkzustand_zh||[]).push([[175],{4971:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var t=n(4848),s=n(8453);const i={title:"Migrating to v4",nav:19},o=void 0,a={id:"migrations/migrating-to-v4",title:"Migrating to v4",description:"The only breaking changes are in types.",source:"@site/docs/migrations/migrating-to-v4.md",sourceDirName:"migrations",slug:"/migrations/migrating-to-v4",permalink:"/zustand-zh/docs/migrations/migrating-to-v4",draft:!1,unlisted:!1,editUrl:"https://github.com/ouweiya/zustand-zh/blob/master/docs/migrations/migrating-to-v4.md",tags:[],version:"current",frontMatter:{title:"Migrating to v4",nav:19},sidebar:"tutorialSidebar",previous:{title:"createContext from zustand/context",permalink:"/zustand-zh/docs/previous-versions/zustand-v3-create-context"}},c={},d=[{value:"<code>create</code>",id:"create",level:2},{value:"<code>StateCreator</code>",id:"statecreator",level:2},{value:"<code>PartialState</code>",id:"partialstate",level:2},{value:"<code>useStore</code>",id:"usestore",level:2},{value:"<code>UseBoundStore</code>",id:"useboundstore",level:2},{value:"<code>UseContextStore</code>",id:"usecontextstore",level:2},{value:"<code>createContext</code>",id:"createcontext",level:2},{value:"<code>combine</code>, <code>devtools</code>, <code>subscribeWithSelector</code>",id:"combine-devtools-subscribewithselector",level:2},{value:"<code>persist</code>",id:"persist",level:2},{value:"<code>redux</code>",id:"redux",level:2}];function l(e){const r={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:"The only breaking changes are in types.\r\nIf you are using Zustand with TypeScript\r\nor JSDoc type annotations,\r\nthis guide applies.\r\nOtherwise, no migration is required."}),"\n",(0,t.jsxs)(r.p,{children:["Also, it's recommended to first read\r\nthe new ",(0,t.jsx)(r.a,{href:"/zustand-zh/docs/guides/typescript",children:"TypeScript Guide"}),",\r\nso that the migration is easier to understand."]}),"\n",(0,t.jsxs)(r.p,{children:["In addition to this migration guide,\r\nyou can also check the\r\n",(0,t.jsx)(r.a,{href:"https://github.com/pmndrs/zustand/compare/v3.7.2...v4.0.0?short_path=37e5b4c#diff-c21e24854115b390eccde717da83f91feb2d5927a76c1485e5f0fdd0135c2afa",children:"diff"}),"\r\nof the test files in the Zustand repository from v3 to v4."]}),"\n",(0,t.jsx)(r.h2,{id:"create",children:(0,t.jsx)(r.code,{children:"create"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Applicable imports"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import create from 'zustand'\r\nimport create from 'zustand/vanilla'\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Change"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:'- create:\r\n-   < State\r\n-   , StoreSetState = StoreApi<State>["set"]\r\n-   , StoreGetState = StoreApi<State>["get"]\r\n-   , Store = StoreApi<State>\r\n-   >\r\n-     (f: ...) => ...\r\n+ create:\r\n+   { <State>(): (f: ...) => ...\r\n+   , <State, Mutators>(f: ...) => ...\r\n+   }\n'})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Migration"})}),"\n",(0,t.jsxs)(r.p,{children:["If you are not passing any type parameters to ",(0,t.jsx)(r.code,{children:"create"}),",\r\nno migration is required."]}),"\n",(0,t.jsxs)(r.p,{children:['If you are using a "leaf" middleware like ',(0,t.jsx)(r.code,{children:"combine"})," or ",(0,t.jsx)(r.code,{children:"redux"}),",\r\nremove all type parameters from ",(0,t.jsx)(r.code,{children:"create"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:["Else, replace ",(0,t.jsx)(r.code,{children:"create<T, ...>(...)"})," with ",(0,t.jsx)(r.code,{children:"create<T>()(...)"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"statecreator",children:(0,t.jsx)(r.code,{children:"StateCreator"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Applicable imports"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import type { StateCreator } from 'zustand'\r\nimport type { StateCreator } from 'zustand/vanilla'\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Change"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:'- type StateCreator\r\n-   < State\r\n-   , StoreSetState = StoreApi<State>["set"]\r\n-   , StoreGetState = StoreApi<State>["get"]\r\n-   , Store = StoreApi<State>\r\n-   > =\r\n-     ...\r\n+ type StateCreator\r\n+   < State\r\n+   , InMutators extends [StoreMutatorIdentifier, unknown][] = []\r\n+   , OutMutators extends [StoreMutatorIdentifier, unknown][] = []\r\n+   , Return = State\r\n+   > =\r\n+     ...\n'})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Migration"})}),"\n",(0,t.jsxs)(r.p,{children:["If you are using ",(0,t.jsx)(r.code,{children:"StateCreator"}),',\r\nyou are likely authoring a middleware\r\nor using the "slices" pattern.\r\nFor that check the\r\n',(0,t.jsx)(r.a,{href:"/zustand-zh/docs/guides/typescript#authoring-middlewares-and-advanced-usage",children:"Authoring middlewares and advanced usage"}),"\r\nand ",(0,t.jsx)(r.a,{href:"/zustand-zh/docs/guides/typescript#common-recipes",children:"Common recipes"}),"\r\nsections of the TypeScript Guide."]}),"\n",(0,t.jsx)(r.h2,{id:"partialstate",children:(0,t.jsx)(r.code,{children:"PartialState"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Applicable imports"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import type { PartialState } from 'zustand'\r\nimport type { PartialState } from 'zustand/vanilla'\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Change"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"- type PartialState\r\n-   < T extends State\r\n-   , K1 extends keyof T = keyof T\r\n-   , K2 extends keyof T = K1\r\n-   , K3 extends keyof T = K2\r\n-   , K4 extends keyof T = K3\r\n-   > =\r\n-   | (Pick<T, K1> | Pick<T, K2> | Pick<T, K3> | Pick<T, K4> | T)\r\n-   | ((state: T) => Pick<T, K1> | Pick<T, K2> | Pick<T, K3> | Pick<T, K4> | T)\r\n+ type PartialState<T> =\r\n+   | Partial<T>\r\n+   | ((state: T) => Partial<T>)\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Migration"})}),"\n",(0,t.jsxs)(r.p,{children:["Replace ",(0,t.jsx)(r.code,{children:"PartialState<T, ...>"})," with ",(0,t.jsx)(r.code,{children:"PartialState<T>"}),"\r\nand preferably turn on ",(0,t.jsx)(r.a,{href:"https://www.typescriptlang.org/tsconfig#exactOptionalPropertyTypes",children:(0,t.jsx)(r.code,{children:"exactOptionalPropertyTypes"})}),"\r\nin your ",(0,t.jsx)(r.code,{children:"tsconfig.json"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'{\r\n  "compilerOptions": {\r\n    "exactOptionalPropertyTypes": true\r\n  }\r\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["We're no longer using the trick to disallow ",(0,t.jsx)(r.code,{children:"{ foo: undefined }"}),"\r\nto be assigned to ",(0,t.jsx)(r.code,{children:"Partial<{ foo: string }>"}),".\r\nInstead, we're relying on the users to turn on ",(0,t.jsx)(r.code,{children:"exactOptionalPropertyTypes"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"usestore",children:(0,t.jsx)(r.code,{children:"useStore"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Applicable imports"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import { useStore } from 'zustand'\r\nimport { useStore } from 'zustand/react'\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Change"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"- useStore:\r\n-   { <State>(store: StoreApi<State>): State\r\n-   , <State, StateSlice>\r\n-       ( store: StoreApi<State>\r\n-       , selector: StateSelector<State, StateSlice>,\r\n-       , equals?: EqualityChecker<StateSlice>\r\n-       ): StateSlice\r\n-   }\r\n+ useStore:\r\n+   <Store, StateSlice = ExtractState<Store>>\r\n+     ( store: Store\r\n+     , selector?: StateSelector<State, StateSlice>,\r\n+     , equals?: EqualityChecker<StateSlice>\r\n+     )\r\n+       => StateSlice\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Migration"})}),"\n",(0,t.jsxs)(r.p,{children:["If you are not passing any type parameters to ",(0,t.jsx)(r.code,{children:"useStore"}),",\r\nno migration is required."]}),"\n",(0,t.jsxs)(r.p,{children:["If you are,\r\nit's recommended to remove all the type parameters,\r\nor pass the ",(0,t.jsx)(r.strong,{children:"store"})," type instead of the ",(0,t.jsx)(r.strong,{children:"state"})," type as the first parameter."]}),"\n",(0,t.jsx)(r.h2,{id:"useboundstore",children:(0,t.jsx)(r.code,{children:"UseBoundStore"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Applicable imports"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import type { UseBoundStore } from 'zustand'\r\nimport type { UseBoundStore } from 'zustand/react'\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Change"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"- type UseBoundStore<\r\n-   State,\r\n-   Store = StoreApi<State>\r\n- > =\r\n-   & { (): T\r\n-     , <StateSlice>\r\n-         ( selector: StateSelector<State, StateSlice>\r\n-         , equals?: EqualityChecker<StateSlice>\r\n-         ): U\r\n-     }\r\n-   & Store\r\n+ type UseBoundStore<Store> =\r\n+   & (<StateSlice = ExtractState<S>>\r\n+       ( selector?: (state: ExtractState<S>) => StateSlice\r\n+       , equals?: (a: StateSlice, b: StateSlice) => boolean\r\n+       ) => StateSlice\r\n+     )\r\n+   & S\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Migration"})}),"\n",(0,t.jsxs)(r.p,{children:["Replace ",(0,t.jsx)(r.code,{children:"UseBoundStore<T>"})," with ",(0,t.jsx)(r.code,{children:"UseBoundStore<StoreApi<T>>"}),",\r\nand ",(0,t.jsx)(r.code,{children:"UseBoundStore<T, S>"})," with ",(0,t.jsx)(r.code,{children:"UseBoundStore<S>"})]}),"\n",(0,t.jsx)(r.h2,{id:"usecontextstore",children:(0,t.jsx)(r.code,{children:"UseContextStore"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Applicable imports"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import type { UseContextStore } from 'zustand/context'\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Change"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"- type UseContextStore\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Migration"})}),"\n",(0,t.jsxs)(r.p,{children:["Use ",(0,t.jsx)(r.code,{children:"typeof MyContext.useStore"})," instead"]}),"\n",(0,t.jsx)(r.h2,{id:"createcontext",children:(0,t.jsx)(r.code,{children:"createContext"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Applicable imports"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import createContext from 'zustand/context'\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Change"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"  createContext:\r\n-   <State, Store = StoreApi<State>>() => ...\r\n+   <Store>() => ...\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Migration"})}),"\n",(0,t.jsxs)(r.p,{children:["Replace ",(0,t.jsx)(r.code,{children:"createContext<T>()"})," with ",(0,t.jsx)(r.code,{children:"createContext<StoreApi<T>>()"}),",\r\nand ",(0,t.jsx)(r.code,{children:"createContext<T, S>()"})," with ",(0,t.jsx)(r.code,{children:"createContext<S>()"}),"."]}),"\n",(0,t.jsxs)(r.h2,{id:"combine-devtools-subscribewithselector",children:[(0,t.jsx)(r.code,{children:"combine"}),", ",(0,t.jsx)(r.code,{children:"devtools"}),", ",(0,t.jsx)(r.code,{children:"subscribeWithSelector"})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Applicable imports"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import { combine } from 'zustand/middleware'\r\nimport { devtools } from 'zustand/middleware'\r\nimport { subscribeWithSelector } from 'zustand/middleware'\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Change"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"- combine:\r\n-   <T, U>(...) => ...\r\n+ combine:\r\n+   <T, U, Mps, Mcs>(...) => ...\r\n\r\n- devtools:\r\n-   <T>(...) => ...\r\n+ devtools:\r\n+   <T, Mps, Mcs>(...) => ...\r\n\r\n- subscribeWithSelector:\r\n-   <T>(...) => ...\r\n+ subscribeWithSelector:\r\n+   <T, Mps, Mcs>(...) => ...\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Migration"})}),"\n",(0,t.jsxs)(r.p,{children:["If you are not passing any type parameters\r\nto ",(0,t.jsx)(r.code,{children:"combine"}),", ",(0,t.jsx)(r.code,{children:"devtools"}),", or ",(0,t.jsx)(r.code,{children:"subscribeWithSelector"}),",\r\nno migration is required."]}),"\n",(0,t.jsx)(r.p,{children:"If you are,\r\nremove all the type parameters,\r\nas they are inferred automatically."}),"\n",(0,t.jsx)(r.h2,{id:"persist",children:(0,t.jsx)(r.code,{children:"persist"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Applicable imports"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import { persist } from 'zustand/middleware'\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Change"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"- persist:\r\n-   <T, U = Partial<T>>(...) => ...\r\n+ persist:\r\n+   <T, Mps, Mcs, U = T>(...) => ...\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Migration"})}),"\n",(0,t.jsx)(r.p,{children:"If you are passing any type parameters,\r\nremove them as they are inferred automatically."}),"\n",(0,t.jsxs)(r.p,{children:["Next, if you are passing the ",(0,t.jsx)(r.code,{children:"partialize"})," option,\r\nthere is no further steps required for migration."]}),"\n",(0,t.jsxs)(r.p,{children:["If you are ",(0,t.jsx)(r.strong,{children:"not"})," passing the ",(0,t.jsx)(r.code,{children:"partialize"})," option,\r\nyou might see some compilation errors.\r\nIf you do not see any,\r\nthere is no further migration required."]}),"\n",(0,t.jsxs)(r.p,{children:["The type of partialized state is now ",(0,t.jsx)(r.code,{children:"T"})," instead of ",(0,t.jsx)(r.code,{children:"Partial<T>"}),",\r\nwhich aligns with the runtime behavior of the default ",(0,t.jsx)(r.code,{children:"partialize"}),",\r\nwhich is an identity (",(0,t.jsx)(r.code,{children:"s => s"}),")."]}),"\n",(0,t.jsxs)(r.p,{children:["If you see some compilation errors,\r\nyou have to find and fix the errors yourself,\r\nbecause they might be indicative of unsound code.\r\nAlternatively, the workaround will be passing\r\n",(0,t.jsx)(r.code,{children:"s => s as Partial<typeof s>"})," to ",(0,t.jsx)(r.code,{children:"partialize"}),".\r\nIf your partialized state is truly ",(0,t.jsx)(r.code,{children:"Partial<T>"}),",\r\nyou should not encounter any bugs."]}),"\n",(0,t.jsx)(r.p,{children:"The runtime behavior has not changed,\r\nonly the types are now correct."}),"\n",(0,t.jsx)(r.h2,{id:"redux",children:(0,t.jsx)(r.code,{children:"redux"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Applicable imports"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"import { redux } from 'zustand/middleware'\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Change"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-diff",children:"- redux:\r\n-   <T, A>(...) => ...\r\n+ redux:\r\n+   <T, A, Mps, Mcs>(...) => ...\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Migration"})}),"\n",(0,t.jsxs)(r.p,{children:["If you are not passing any type parameters to ",(0,t.jsx)(r.code,{children:"redux"}),",\r\nno migration is required."]}),"\n",(0,t.jsxs)(r.p,{children:["If you are,\r\nremove all the type parameters,\r\nand annotate only the second (action) parameter.\r\nThat is, replace ",(0,t.jsx)(r.code,{children:"redux<T, A>((state, action) => ..., ...)"}),"\r\nwith ",(0,t.jsx)(r.code,{children:"redux((state, action: A) => ..., ...)"}),"."]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>a});var t=n(6540);const s={},i=t.createContext(s);function o(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);