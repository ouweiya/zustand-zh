"use strict";(self.webpackChunkzustand_zh=self.webpackChunkzustand_zh||[]).push([[305],{5682:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=s(4848),r=s(8453);const i={title:"Flux inspired practice",nav:5},a=void 0,o={id:"guides/flux-inspired-practice",title:"Flux inspired practice",description:"Although Zustand is an unopinionated library, we do recommend a few patterns.",source:"@site/docs/guides/flux-inspired-practice.md",sourceDirName:"guides",slug:"/guides/flux-inspired-practice",permalink:"/zustand-zh/docs/guides/flux-inspired-practice",draft:!1,unlisted:!1,editUrl:"https://github.com/ouweiya/zustand-zh/docs/guides/flux-inspired-practice.md",tags:[],version:"current",frontMatter:{title:"Flux inspired practice",nav:5},sidebar:"tutorialSidebar",previous:{title:"Calling actions outside a React event handler in pre React 18",permalink:"/zustand-zh/docs/guides/event-handler-in-pre-react-18"},next:{title:"How to reset state",permalink:"/zustand-zh/docs/guides/how-to-reset-state"}},d={},c=[{value:"Recommended patterns",id:"recommended-patterns",level:2},{value:"Single store",id:"single-store",level:3},{value:"Use <code>set</code> / <code>setState</code> to update the store",id:"use-set--setstate-to-update-the-store",level:3},{value:"Colocate store actions",id:"colocate-store-actions",level:3},{value:"Redux-like patterns",id:"redux-like-patterns",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["Although Zustand is an unopinionated library, we do recommend a few patterns.\r\nThese are inspired by practices originally found in ",(0,n.jsx)(t.a,{href:"https://github.com/facebookarchive/flux",children:"Flux"}),",\r\nand more recently ",(0,n.jsx)(t.a,{href:"https://redux.js.org/understanding/thinking-in-redux/three-principles",children:"Redux"}),",\r\nso if you are coming from another library, you should feel right at home."]}),"\n",(0,n.jsx)(t.p,{children:"However, Zustand does differ in some fundamental ways,\r\nso some terminology may not perfectly align to other libraries."}),"\n",(0,n.jsx)(t.h2,{id:"recommended-patterns",children:"Recommended patterns"}),"\n",(0,n.jsx)(t.h3,{id:"single-store",children:"Single store"}),"\n",(0,n.jsx)(t.p,{children:"Your applications global state should be located in a single Zustand store."}),"\n",(0,n.jsxs)(t.p,{children:["If you have a large application, Zustand supports ",(0,n.jsx)(t.a,{href:"/zustand-zh/docs/guides/slices-pattern",children:"splitting the store into slices"}),"."]}),"\n",(0,n.jsxs)(t.h3,{id:"use-set--setstate-to-update-the-store",children:["Use ",(0,n.jsx)(t.code,{children:"set"})," / ",(0,n.jsx)(t.code,{children:"setState"})," to update the store"]}),"\n",(0,n.jsxs)(t.p,{children:["Always use ",(0,n.jsx)(t.code,{children:"set"})," (or ",(0,n.jsx)(t.code,{children:"setState"}),") to perform updates to your store.\r\n",(0,n.jsx)(t.code,{children:"set"})," (and ",(0,n.jsx)(t.code,{children:"setState"}),") ensures the described update is correctly merged and listeners are appropriately notified."]}),"\n",(0,n.jsx)(t.h3,{id:"colocate-store-actions",children:"Colocate store actions"}),"\n",(0,n.jsx)(t.p,{children:"In Zustand, state can be updated without the use of dispatched actions and reducers found in other Flux libraries.\r\nThese store actions can be added directly to the store as shown below."}),"\n",(0,n.jsxs)(t.p,{children:["Optionally, by using ",(0,n.jsx)(t.code,{children:"setState"})," they can be ",(0,n.jsx)(t.a,{href:"/zustand-zh/docs/guides/practice-with-no-store-actions",children:"located external to the store"})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"const useBoundStore = create((set) => ({\r\n  storeSliceA: ...,\r\n  storeSliceB: ...,\r\n  storeSliceC: ...,\r\n  updateX: () => set(...),\r\n  updateY: () => set(...),\r\n}))\n"})}),"\n",(0,n.jsx)(t.h2,{id:"redux-like-patterns",children:"Redux-like patterns"}),"\n",(0,n.jsxs)(t.p,{children:["If you can't live without Redux-like reducers, you can define a ",(0,n.jsx)(t.code,{children:"dispatch"})," function on the root level of the store:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"const types = { increase: 'INCREASE', decrease: 'DECREASE' }\r\n\r\nconst reducer = (state, { type, by = 1 }) => {\r\n  switch (type) {\r\n    case types.increase:\r\n      return { grumpiness: state.grumpiness + by }\r\n    case types.decrease:\r\n      return { grumpiness: state.grumpiness - by }\r\n  }\r\n}\r\n\r\nconst useGrumpyStore = create((set) => ({\r\n  grumpiness: 0,\r\n  dispatch: (args) => set((state) => reducer(state, args)),\r\n}))\r\n\r\nconst dispatch = useGrumpyStore((state) => state.dispatch)\r\ndispatch({ type: types.increase, by: 2 })\n"})}),"\n",(0,n.jsx)(t.p,{children:"You could also use our redux-middleware. It wires up your main reducer, sets initial state, and adds a dispatch function to the state itself and the vanilla api."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"import { redux } from 'zustand/middleware'\r\n\r\nconst useReduxStore = create(redux(reducer, initialState))\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Another way to update the store could be through functions wrapping the state functions. These could also handle side-effects of actions. For example, with HTTP-calls. To use Zustand in a non-reactive way, see ",(0,n.jsx)(t.a,{href:"https://github.com/pmndrs/zustand#readingwriting-state-and-reacting-to-changes-outside-of-components",children:"the readme"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var n=s(6540);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);