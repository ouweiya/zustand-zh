"use strict";(self.webpackChunkzustand_zh=self.webpackChunkzustand_zh||[]).push([[407],{5626:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>h});var n=t(4848),a=t(8453);const s={title:"Connect to state with URL",nav:12},o=void 0,i={id:"guides/connect-to-state-with-url-hash",title:"Connect to state with URL",description:"Connect State with URL Hash",source:"@site/docs/guides/connect-to-state-with-url-hash.md",sourceDirName:"guides",slug:"/guides/connect-to-state-with-url-hash",permalink:"/zustand-zh/docs/guides/connect-to-state-with-url-hash",draft:!1,unlisted:!1,editUrl:"https://github.com/ouweiya/zustand-zh/docs/guides/connect-to-state-with-url-hash.md",tags:[],version:"current",frontMatter:{title:"Connect to state with URL",nav:12},sidebar:"tutorialSidebar",previous:{title:"Auto Generating Selectors",permalink:"/zustand-zh/docs/guides/auto-generating-selectors"},next:{title:"Calling actions outside a React event handler in pre React 18",permalink:"/zustand-zh/docs/guides/event-handler-in-pre-react-18"}},c={},h=[{value:"Connect State with URL Hash",id:"connect-state-with-url-hash",level:2},{value:"CodeSandbox Demo",id:"codesandbox-demo",level:3},{value:"Persist and Connect State with URL Parameters (Example: URL Query Parameters)",id:"persist-and-connect-state-with-url-parameters-example-url-query-parameters",level:2}];function l(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h2,{id:"connect-state-with-url-hash",children:"Connect State with URL Hash"}),"\n",(0,n.jsx)(r.p,{children:"If you want to connect state of a store to URL hash, you can create your own hash storage."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"import { create } from 'zustand'\r\nimport { persist, StateStorage, createJSONStorage } from 'zustand/middleware'\r\n\r\nconst hashStorage: StateStorage = {\r\n  getItem: (key): string => {\r\n    const searchParams = new URLSearchParams(location.hash.slice(1))\r\n    const storedValue = searchParams.get(key) ?? ''\r\n    return JSON.parse(storedValue)\r\n  },\r\n  setItem: (key, newValue): void => {\r\n    const searchParams = new URLSearchParams(location.hash.slice(1))\r\n    searchParams.set(key, JSON.stringify(newValue))\r\n    location.hash = searchParams.toString()\r\n  },\r\n  removeItem: (key): void => {\r\n    const searchParams = new URLSearchParams(location.hash.slice(1))\r\n    searchParams.delete(key)\r\n    location.hash = searchParams.toString()\r\n  },\r\n}\r\n\r\nexport const useBoundStore = create(\r\n  persist(\r\n    (set, get) => ({\r\n      fishes: 0,\r\n      addAFish: () => set({ fishes: get().fishes + 1 }),\r\n    }),\r\n    {\r\n      name: 'food-storage', // unique name\r\n      storage: createJSONStorage(() => hashStorage),\r\n    },\r\n  ),\r\n)\n"})}),"\n",(0,n.jsx)(r.h3,{id:"codesandbox-demo",children:"CodeSandbox Demo"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{href:"https://codesandbox.io/s/zustand-state-with-url-hash-demo-f29b88?file=/src/store/index.ts",children:"https://codesandbox.io/s/zustand-state-with-url-hash-demo-f29b88?file=/src/store/index.ts"})}),"\n",(0,n.jsx)(r.h2,{id:"persist-and-connect-state-with-url-parameters-example-url-query-parameters",children:"Persist and Connect State with URL Parameters (Example: URL Query Parameters)"}),"\n",(0,n.jsxs)(r.p,{children:["There are times when you want to conditionally connect the state to the URL.\r\nThis example depicts usage of the URL query parameters\r\nwhile keeping it synced with another persistence implementation, like ",(0,n.jsx)(r.code,{children:"localstorage"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["If you want the URL params to always populate, the conditional check on ",(0,n.jsx)(r.code,{children:"getUrlSearch()"})," can be removed."]}),"\n",(0,n.jsx)(r.p,{children:"The implementation below will update the URL in place, without refresh, as the relevant states change."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"import { create } from 'zustand'\r\nimport { persist, StateStorage, createJSONStorage } from 'zustand/middleware'\r\n\r\nconst getUrlSearch = () => {\r\n  return window.location.search.slice(1)\r\n}\r\n\r\nconst persistentStorage: StateStorage = {\r\n  getItem: (key): string => {\r\n    // Check URL first\r\n    if (getUrlSearch()) {\r\n      const searchParams = new URLSearchParams(getUrlSearch())\r\n      const storedValue = searchParams.get(key)\r\n      return JSON.parse(storedValue as string)\r\n    } else {\r\n      // Otherwise, we should load from localstorage or alternative storage\r\n      return JSON.parse(localStorage.getItem(key) as string)\r\n    }\r\n  },\r\n  setItem: (key, newValue): void => {\r\n    // Check if query params exist at all, can remove check if always want to set URL\r\n    if (getUrlSearch()) {\r\n      const searchParams = new URLSearchParams(getUrlSearch())\r\n      searchParams.set(key, JSON.stringify(newValue))\r\n      window.history.replaceState(null, '', `?${searchParams.toString()}`)\r\n    }\r\n\r\n    localStorage.setItem(key, JSON.stringify(newValue))\r\n  },\r\n  removeItem: (key): void => {\r\n    const searchParams = new URLSearchParams(getUrlSearch())\r\n    searchParams.delete(key)\r\n    window.location.search = searchParams.toString()\r\n  },\r\n}\r\n\r\ntype LocalAndUrlStore = {\r\n  typesOfFish: string[]\r\n  addTypeOfFish: (fishType: string) => void\r\n  numberOfBears: number\r\n  setNumberOfBears: (newNumber: number) => void\r\n}\r\n\r\nconst storageOptions = {\r\n  name: 'fishAndBearsStore',\r\n  storage: createJSONStorage<LocalAndUrlStore>(() => persistentStorage),\r\n}\r\n\r\nconst useLocalAndUrlStore = create(\r\n  persist<LocalAndUrlStore>(\r\n    (set) => ({\r\n      typesOfFish: [],\r\n      addTypeOfFish: (fishType) =>\r\n        set((state) => ({ typesOfFish: [...state.typesOfFish, fishType] })),\r\n\r\n      numberOfBears: 0,\r\n      setNumberOfBears: (numberOfBears) => set(() => ({ numberOfBears })),\r\n    }),\r\n    storageOptions,\r\n  ),\r\n)\r\n\r\nexport default useLocalAndUrlStore\n"})}),"\n",(0,n.jsx)(r.p,{children:"When generating the URL from a component, you can call buildShareableUrl:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"const buildURLSuffix = (params, version = 0) => {\r\n  const searchParams = new URLSearchParams()\r\n\r\n  const zustandStoreParams = {\r\n    state: {\r\n      typesOfFish: params.typesOfFish,\r\n      numberOfBears: params.numberOfBears,\r\n    },\r\n    version: version, // version is here because that is included with how Zustand sets the state\r\n  }\r\n\r\n  // The URL param key should match the name of the store, as specified as in storageOptions above\r\n  searchParams.set('fishAndBearsStore', JSON.stringify(zustandStoreParams))\r\n  return searchParams.toString()\r\n}\r\n\r\nexport const buildShareableUrl = (params, version) => {\r\n  return `${window.location.origin}?${buildURLSuffix(params, version)}`\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"The generated URL would look like (here without any encoding, for readability):"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.code,{children:'https://localhost/search?fishAndBearsStore={"state":{"typesOfFish":["tilapia","salmon"],"numberOfBears":15},"version":0}}'})})]})}function d(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>i});var n=t(6540);const a={},s=n.createContext(a);function o(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);