"use strict";(self.webpackChunkzustand_zh=self.webpackChunkzustand_zh||[]).push([[876],{888:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var n=t(4848),o=t(8453);const a={title:"Initialize state with props",nav:14},s=void 0,i={id:"guides/initialize-state-with-props",title:"Initialize state with props",description:"In cases where dependency injection is needed, such as when a store should be initialized with props from a component, the recommended approach is to use a vanilla store with React.context.",source:"@site/docs/guides/initialize-state-with-props.md",sourceDirName:"guides",slug:"/guides/initialize-state-with-props",permalink:"/zustand-zh/docs/guides/initialize-state-with-props",draft:!1,unlisted:!1,editUrl:"https://github.com/ouweiya/zustand-zh/docs/guides/initialize-state-with-props.md",tags:[],version:"current",frontMatter:{title:"Initialize state with props",nav:14},sidebar:"tutorialSidebar",previous:{title:"Immutable state and merging",permalink:"/zustand-zh/docs/guides/immutable-state-and-merging"},next:{title:"Map and Set Usage",permalink:"/zustand-zh/docs/guides/maps-and-sets-usage"}},c={},d=[{value:"Store creator with <code>createStore</code>",id:"store-creator-with-createstore",level:2},{value:"Creating a context with <code>React.createContext</code>",id:"creating-a-context-with-reactcreatecontext",level:2},{value:"Basic component usage",id:"basic-component-usage",level:2},{value:"Common patterns",id:"common-patterns",level:2},{value:"Wrapping the context provider",id:"wrapping-the-context-provider",level:3},{value:"Extracting context logic into a custom hook",id:"extracting-context-logic-into-a-custom-hook",level:3},{value:"Optionally allow using a custom equality function",id:"optionally-allow-using-a-custom-equality-function",level:3},{value:"Complete example",id:"complete-example",level:3}];function l(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.p,{children:["In cases where ",(0,n.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Dependency_injection",children:"dependency injection"})," is needed, such as when a store should be initialized with props from a component, the recommended approach is to use a vanilla store with React.context."]}),"\n",(0,n.jsxs)(r.h2,{id:"store-creator-with-createstore",children:["Store creator with ",(0,n.jsx)(r.code,{children:"createStore"})]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"import { createStore } from 'zustand'\r\n\r\ninterface BearProps {\r\n  bears: number\r\n}\r\n\r\ninterface BearState extends BearProps {\r\n  addBear: () => void\r\n}\r\n\r\ntype BearStore = ReturnType<typeof createBearStore>\r\n\r\nconst createBearStore = (initProps?: Partial<BearProps>) => {\r\n  const DEFAULT_PROPS: BearProps = {\r\n    bears: 0,\r\n  }\r\n  return createStore<BearState>()((set) => ({\r\n    ...DEFAULT_PROPS,\r\n    ...initProps,\r\n    addBear: () => set((state) => ({ bears: ++state.bears })),\r\n  }))\r\n}\n"})}),"\n",(0,n.jsxs)(r.h2,{id:"creating-a-context-with-reactcreatecontext",children:["Creating a context with ",(0,n.jsx)(r.code,{children:"React.createContext"})]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"import { createContext } from 'react'\r\n\r\nexport const BearContext = createContext<BearStore | null>(null)\n"})}),"\n",(0,n.jsx)(r.h2,{id:"basic-component-usage",children:"Basic component usage"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-tsx",children:"// Provider implementation\r\nimport { useRef } from 'react'\r\n\r\nfunction App() {\r\n  const store = useRef(createBearStore()).current\r\n  return (\r\n    <BearContext.Provider value={store}>\r\n      <BasicConsumer />\r\n    </BearContext.Provider>\r\n  )\r\n}\n"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-tsx",children:"// Consumer component\r\nimport { useContext } from 'react'\r\nimport { useStore } from 'zustand'\r\n\r\nfunction BasicConsumer() {\r\n  const store = useContext(BearContext)\r\n  if (!store) throw new Error('Missing BearContext.Provider in the tree')\r\n  const bears = useStore(store, (s) => s.bears)\r\n  const addBear = useStore(store, (s) => s.addBear)\r\n  return (\r\n    <>\r\n      <div>{bears} Bears.</div>\r\n      <button onClick={addBear}>Add bear</button>\r\n    </>\r\n  )\r\n}\n"})}),"\n",(0,n.jsx)(r.h2,{id:"common-patterns",children:"Common patterns"}),"\n",(0,n.jsx)(r.h3,{id:"wrapping-the-context-provider",children:"Wrapping the context provider"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-tsx",children:"// Provider wrapper\r\nimport { useRef } from 'react'\r\n\r\ntype BearProviderProps = React.PropsWithChildren<BearProps>\r\n\r\nfunction BearProvider({ children, ...props }: BearProviderProps) {\r\n  const storeRef = useRef<BearStore>()\r\n  if (!storeRef.current) {\r\n    storeRef.current = createBearStore(props)\r\n  }\r\n  return (\r\n    <BearContext.Provider value={storeRef.current}>\r\n      {children}\r\n    </BearContext.Provider>\r\n  )\r\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"extracting-context-logic-into-a-custom-hook",children:"Extracting context logic into a custom hook"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-tsx",children:"// Mimic the hook returned by `create`\r\nimport { useContext } from 'react'\r\nimport { useStore } from 'zustand'\r\n\r\nfunction useBearContext<T>(selector: (state: BearState) => T): T {\r\n  const store = useContext(BearContext)\r\n  if (!store) throw new Error('Missing BearContext.Provider in the tree')\r\n  return useStore(store, selector)\r\n}\n"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-tsx",children:"// Consumer usage of the custom hook\r\nfunction CommonConsumer() {\r\n  const bears = useBearContext((s) => s.bears)\r\n  const addBear = useBearContext((s) => s.addBear)\r\n  return (\r\n    <>\r\n      <div>{bears} Bears.</div>\r\n      <button onClick={addBear}>Add bear</button>\r\n    </>\r\n  )\r\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"optionally-allow-using-a-custom-equality-function",children:"Optionally allow using a custom equality function"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-tsx",children:"// Allow custom equality function by using useStoreWithEqualityFn instead of useStore\r\nimport { useContext } from 'react'\r\nimport { useStoreWithEqualityFn } from 'zustand/traditional'\r\n\r\nfunction useBearContext<T>(\r\n  selector: (state: BearState) => T,\r\n  equalityFn?: (left: T, right: T) => boolean,\r\n): T {\r\n  const store = useContext(BearContext)\r\n  if (!store) throw new Error('Missing BearContext.Provider in the tree')\r\n  return useStoreWithEqualityFn(store, selector, equalityFn)\r\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"complete-example",children:"Complete example"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-tsx",children:"// Provider wrapper & custom hook consumer\r\nfunction App2() {\r\n  return (\r\n    <BearProvider bears={2}>\r\n      <HookConsumer />\r\n    </BearProvider>\r\n  )\r\n}\n"})})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>i});var n=t(6540);const o={},a=n.createContext(o);function s(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);