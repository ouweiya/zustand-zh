"use strict";(self.webpackChunkzustand_zh=self.webpackChunkzustand_zh||[]).push([[0],{3629:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var t=r(4848),s=r(8453);const o={title:"SSR and Hydration",nav:20},i=void 0,d={id:"guides/ssr-and-hydration",title:"SSR and Hydration",description:"Server-side Rendering (SSR) {#server-side-rendering-(ssr)}",source:"@site/docs/guides/ssr-and-hydration.md",sourceDirName:"guides",slug:"/guides/ssr-and-hydration",permalink:"/zustand-zh/docs/guides/ssr-and-hydration",draft:!1,unlisted:!1,editUrl:"https://github.com/ouweiya/zustand-zh/blob/master/docs/guides/ssr-and-hydration.md",tags:[],version:"current",frontMatter:{title:"SSR and Hydration",nav:20},sidebar:"tutorialSidebar",previous:{title:"Prevent rerenders with useShallow",permalink:"/zustand-zh/docs/guides/prevent-rerenders-with-use-shallow"},next:{title:"Setup with Next.js",permalink:"/zustand-zh/docs/guides/nextjs"}},a={},c=[{value:"Server-side Rendering (SSR)",id:"server-side-rendering-(ssr)",level:2},{value:"React",id:"react",level:3},{value:"Hydration",id:"hydration",level:2},{value:"React",id:"react",level:3}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"server-side-rendering-(ssr)",children:"Server-side Rendering (SSR)"}),"\n",(0,t.jsx)(n.p,{children:'Server-side Rendering (SSR) is a technique that helps us render our components into\r\nHTML strings on the server, send them directly to the browser, and finally "hydrate" the\r\nstatic markup into a fully interactive app on the client.'}),"\n",(0,t.jsx)(n.h3,{id:"react",children:"React"}),"\n",(0,t.jsxs)(n.p,{children:["Let's say we want to render a stateless app using React. In order to do that, we need\r\nto use ",(0,t.jsx)(n.code,{children:"express"}),", ",(0,t.jsx)(n.code,{children:"react"})," and ",(0,t.jsx)(n.code,{children:"react-dom/server"}),". We don't need ",(0,t.jsx)(n.code,{children:"react-dom/client"}),"\r\nsince it's a stateless app."]}),"\n",(0,t.jsx)(n.p,{children:"Let's dive into that:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"express"})," helps us build a web app that we can run using Node,"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"react"})," helps us build the UI components that we use in our app,"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"react-dom/server"})," helps us render our components on a server."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'// tsconfig.json\r\n{\r\n  "compilerOptions": {\r\n    "noImplicitAny": false,\r\n    "noEmitOnError": true,\r\n    "removeComments": false,\r\n    "sourceMap": true,\r\n    "target": "esnext"\r\n  },\r\n  "include": ["**/*"]\r\n}\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," do not forget to remove all comments from your ",(0,t.jsx)(n.code,{children:"tsconfig.json"})," file."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// app.tsx\r\nexport const App = () => {\r\n  return (\r\n    <html>\r\n      <head>\r\n        <meta charSet="utf-8" />\r\n        <meta name="viewport" content="width=device-width, initial-scale=1" />\r\n        <title>Static Server-side-rendered App</title>\r\n      </head>\r\n      <body>\r\n        <div>Hello World!</div>\r\n      </body>\r\n    </html>\r\n  )\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// server.tsx\r\nimport express from 'express'\r\nimport React from 'react'\r\nimport ReactDOMServer from 'react-dom/server'\r\n\r\nimport { App } from './app.tsx'\r\n\r\nconst port = Number.parseInt(process.env.PORT || '3000', 10)\r\nconst app = express()\r\n\r\napp.get('/', (_, res) => {\r\n  const { pipe } = ReactDOMServer.renderToPipeableStream(<App />, {\r\n    onShellReady() {\r\n      res.setHeader('content-type', 'text/html')\r\n      pipe(res)\r\n    },\r\n  })\r\n})\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server is listening at ${port}`)\r\n})\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"tsc --build\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"node server.js\n"})}),"\n",(0,t.jsx)(n.h2,{id:"hydration",children:"Hydration"}),"\n",(0,t.jsxs)(n.p,{children:['Hydration turns the initial HTML snapshot from the server into a fully interactive app\r\nthat runs in the browser. The right way to "hydrate" a component is by using ',(0,t.jsx)(n.code,{children:"hydrateRoot"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"react",children:"React"}),"\n",(0,t.jsxs)(n.p,{children:["Let's say we want to render a stateful app using React. In order to do that we need to\r\nuse ",(0,t.jsx)(n.code,{children:"express"}),", ",(0,t.jsx)(n.code,{children:"react"}),", ",(0,t.jsx)(n.code,{children:"react-dom/server"})," and ",(0,t.jsx)(n.code,{children:"react-dom/client"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Let's dive into that:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"express"})," helps us build a web app that we can run using Node,"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"react"})," helps us build the UI components that we use in our app,"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"react-dom/server"})," helps us render our components on a server,"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"react-dom/client"})," helps us hydrate our components on a client."]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"}),' Do not forget that even if we can render our components on a server, it is\r\nimportant to "hydrate" them on a client to make them interactive.']}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'// tsconfig.json\r\n{\r\n  "compilerOptions": {\r\n    "noImplicitAny": false,\r\n    "noEmitOnError": true,\r\n    "removeComments": false,\r\n    "sourceMap": true,\r\n    "target": "esnext"\r\n  },\r\n  "include": ["**/*"]\r\n}\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," do not forget to remove all comments in your ",(0,t.jsx)(n.code,{children:"tsconfig.json"})," file."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// app.tsx\r\nexport const App = () => {\r\n  return (\r\n    <html>\r\n      <head>\r\n        <meta charSet="utf-8" />\r\n        <meta name="viewport" content="width=device-width, initial-scale=1" />\r\n        <title>Static Server-side-rendered App</title>\r\n      </head>\r\n      <body>\r\n        <div>Hello World!</div>\r\n      </body>\r\n    </html>\r\n  )\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// main.tsx\r\nimport ReactDOMClient from 'react-dom/client'\r\n\r\nimport { App } from './app.tsx'\r\n\r\nReactDOMClient.hydrateRoot(<App />, document)\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// server.tsx\r\nimport express from 'express'\r\nimport React from 'react'\r\nimport ReactDOMServer from 'react-dom/server'\r\n\r\nimport { App } from './app.tsx'\r\n\r\nconst port = Number.parseInt(process.env.PORT || '3000', 10)\r\nconst app = express()\r\n\r\napp.use('/', (_, res) => {\r\n  const { pipe } = ReactDOMServer.renderToPipeableStream(<App />, {\r\n    bootstrapScripts: ['/main.js'],\r\n    onShellReady() {\r\n      res.setHeader('content-type', 'text/html')\r\n      pipe(res)\r\n    },\r\n  })\r\n})\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server is listening at ${port}`)\r\n})\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"tsc --build\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"node server.js\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Warning:"})," The React tree you pass to ",(0,t.jsx)(n.code,{children:"hydrateRoot"})," needs to produce the same output as it did on the server.\r\nThe most common causes leading to hydration errors include:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Extra whitespace (like newlines) around the React-generated HTML inside the root node."}),"\n",(0,t.jsx)(n.li,{children:"Using checks like typeof window !== 'undefined' in your rendering logic."}),"\n",(0,t.jsxs)(n.li,{children:["Using browser-only APIs like ",(0,t.jsx)(n.code,{children:"window.matchMedia"})," in your rendering logic."]}),"\n",(0,t.jsx)(n.li,{children:"Rendering different data on the server and the client."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"React recovers from some hydration errors, but you must fix them like other bugs. In the best case, they\u2019ll lead to a slowdown; in the worst case, event handlers can get attached to the wrong elements."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["You can read more about the caveats and pitfalls here: ",(0,t.jsx)(n.a,{href:"https://react.dev/reference/react-dom/client/hydrateRoot",children:"hydrateRoot"})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>d});var t=r(6540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);